# Build and autotest script for PX4 Firmware
# http://travis-ci.org

language: cpp

git:
  depth: 50

# white list
branches:
  only:
  - tap-v3

matrix:
  fast_finish: true
  include:
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=qgc_firmware
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=check_format
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=tests_linux
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=clang-tidy
    - os: osx
      sudo: true
      osx_image: xcode9.2
      env: BUILD_TARGET=tests

cache:
  ccache: true

before_install:
  - if [[ "${TRAVIS_OS_NAME}" = "linux" && "${TRAVIS_BRANCH}" == "coverity" ]]; then sudo apt-get install genromfs && pip install empy jinja2; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew tap PX4/px4; brew update; brew upgrade; brew install px4-dev; brew tap osrf/simulation; brew install gazebo7 opencv; brew install s3cmd && sudo -H easy_install pip && sudo -H pip install empy jinja2; fi
  - if [[ "${BUILD_TARGET}" = "qgc_firmware" && "${TRAVIS_BRANCH}" != "coverity" ]]; then pip install --user s3cmd pycrypto pyserial; fi

script:
    # Exit if one of the scripts fails.
  - set -e
  - if [[ "${BUILD_TARGET}" = "qgc_firmware" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'PX4_RESTRICTED_BUILD=1 make check_tap-v2_default check_tap-v3_default';
    elif [[ "${BUILD_TARGET}" = "check_format" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'make check_format';
    elif [[ "${BUILD_TARGET}" = "tests_linux" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'make tests';
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      make tests;
    elif [ "${BUILD_TARGET}" = "clang-tidy" ]; then
      ./Tools/docker_run.sh 'make clang-tidy-quiet';
    fi;

after_success:
  - set -ev
  - if [[ "${BUILD_TARGET}" = "qgc_firmware" && "${TRAVIS_BRANCH}" != "coverity" ]]; then

      mkdir -p s3autopilot;
      ./Tools/generate_yuneec.py build/tap-v2_default/tap-v2_default.px4 s3autopilot/autopilot.yuneec ${AUTOPILOT_AES_KEY};
      echo "${TRAVIS_TAG}" > s3autopilot/version;
      sha256sum s3autopilot/autopilot.yuneec | head -c 64 > s3autopilot/hash;

      is_alpha=`echo "$TRAVIS_TAG" | grep '^v[0-9]\+.[0-9]\+.[0-9]\+-[0-9]\+.[0-9]\+.[0-9]\+alpha[0-9]\+$' | wc -l`;
      is_beta=`echo "$TRAVIS_TAG" | grep '^v[0-9]\+.[0-9]\+.[0-9]\+-[0-9]\+.[0-9]\+.[0-9]\+beta[0-9]\+$' | wc -l`;
      is_rc=`echo "$TRAVIS_TAG" | grep '^v[0-9]\+.[0-9]\+.[0-9]\+-[0-9]\+.[0-9]\+.[0-9]\+rc[0-9]\+$' | wc -l`;
      is_release=`echo "$TRAVIS_TAG" | grep '^v[0-9]\+.[0-9]\+.[0-9]\+-[0-9]\+.[0-9]\+.[0-9]\+$' | wc -l`;

      function upload_to_s3 { s3cmd --add-header=x-amz-meta-firmware-version:${TRAVIS_TAG} -m $3 --acl-public --access_key=${AWS_ACCESS_KEY_ID} --secret_key=${AWS_SECRET_ACCESS_KEY} --add-header="Cache-Control:public, max-age=0" put $1 s3://${S3_BUCKET_NAME}/$2; };

      if [[ is_rc -eq 1 ]]; then
          echo "Deploying release candidate ...";
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/rc/autopilot-${TRAVIS_TAG}.yuneec application/octet-stream;
      elif [[ is_alpha -eq 1 ]]; then
          echo "Deploying alpha version ...";
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/alpha/autopilot-${TRAVIS_TAG}.yuneec application/octet-stream;
      elif [[ is_beta -eq 1 ]]; then
          echo "Deploying beta version ...";
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/beta/autopilot-${TRAVIS_TAG}.yuneec application/octet-stream;
      elif [[ is_release -eq 1 ]]; then
          echo "Deploying release version ...";
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/latest/autopilot.yuneec application/octet-stream;
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/${TRAVIS_TAG}/autopilot.yuneec application/octet-stream;
          upload_to_s3 s3autopilot/version autopilot/tapv3/latest/version text/plain;
          upload_to_s3 s3autopilot/version autopilot/tapv3/${TRAVIS_TAG}/version text/plain;
          upload_to_s3 s3autopilot/hash autopilot/tapv3/latest/hash text/plain;
          upload_to_s3 s3autopilot/hash autopilot/tapv3/${TRAVIS_TAG}/hash text/plain;
      else
          echo "Deploying developer version ...";
          upload_to_s3 s3autopilot/autopilot.yuneec autopilot/tapv3/developer/autopilot-${TRAVIS_COMMIT}.yuneec application/octet-stream;
      fi;
    fi;
