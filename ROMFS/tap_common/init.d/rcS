#!nsh
#
# TAP startup script.
#
#  NOTE: COMMENT LINES ARE REMOVED BEFORE STORED IN ROMFS.
#

# V1 HW Serial map:
# /dev/ttyS0: GPS
# /dev/ttyS1: GB
# /dev/ttyS2: nsh shell / console
# /dev/ttyS3: payload
# /dev/ttyS4: esc bus
# /dev/ttyS5: RC input

# V2 HW Serial map:
# /dev/ttyS0: GPS
# /dev/ttyS1: GB
# /dev/ttyS2: esc bus / console (mux s7)
# /dev/ttyS3: payload
# /dev/ttyS4: RC input

#
# Start CDC/ACM serial driver
#
sercon

#
# Configuration defaults
#
# When the system configuration changes this variable
# needs to be incremented. This will not reset the
# calibration but will reset the system tuning and gains
# to reflect the new defaults
#
set DEFAULTS_VER 66

# Log file location
set LOG_FILE /fs/microsd/bootlog.txt
if ver hwcmp TAP_V1
then
	set DATAMAN_OPT -r
fi
set START_LOGGER 0
set PARAM_FILE /fs/microsd/params

#
# Try to mount the microSD card.
#
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	echo "microSD present"
	unset DATAMAN_OPT
	set START_LOGGER 1

else
	if mkfatfs /dev/mmcsd0
	then
		if mount -t vfat /dev/mmcsd0 /fs/microsd
		then
			echo "microSD card formatted"
			unset DATAMAN_OPT
		else
			echo "ERROR [init] Format failed"
			#tone_alarm MNBG
			set LOG_FILE /dev/null
			set PARAM_FILE /dev/null
		fi
	else
		set LOG_FILE /dev/null
		set PARAM_FILE /dev/null
	fi
fi

#
# Start the ORB (first app to start)
#
uorb start

#
# Start the MTD
#
if mtd start
then
else
fi

#
# Load parameters
#

if ver hwcmp TAP_V2
then

	# now load from SD card, which can override the temp calib params
	param select $PARAM_FILE
	# we need to use param import (instead of load), because load will cause a reset
	if param load
	then
	else
		# Param load failed
		# wipe the SD card to restore the system
		if mount -t vfat /dev/mmcsd0 /fs/microsd
		then
		fi

		if param reset
		then
		fi

		if param save
		then
		fi
	fi

	# load the temperature calibration data from EEPROM.
	if param import /fs/mtd_caldata
	then
	fi

	# disable commandline param autosave
	param autosave off


else
# tap v1
	if param load
	then
	else
		if param reset
		then
		fi
	fi
fi

unset PARAM_FILE

if ver hwcmp TAP_V2
then
	camera_trigger start
fi


#
# Set parameters and env variables for selected AUTOSTART
#
if param compare SYS_AUTOSTART 0
then
	param set SYS_AUTOSTART 6021
	param set SYS_AUTOCONFIG 1
fi

#
# This is to migrate everyone from 6001 to param 6021.
# TODO: remove this again once enough time has passed
#
if param compare SYS_AUTOSTART 6001
then
	param set SYS_AUTOSTART 6021
fi

#
# Set AUTOCNF flag to use it in AUTOSTART scripts
#
if param compare SYS_AUTOCONFIG 1
then
	# Wipe out params except RC*, TC_* (temperature calibration) and flight time
	param reset_nostart RC* TC_* LND_FLIGHT_T_*
	set AUTOCNF yes
else
	set AUTOCNF no
fi

if param compare SYS_PARAM_VER ${DEFAULTS_VER}
then
	set NEW_DEFAULTS no
else
	set NEW_DEFAULTS yes
fi

#
# Set default values
#
set VEHICLE_TYPE none
set MIXER none
set OUTPUT_MODE none
set PWM_OUT none
set PWM_RATE none
set PWM_DISARMED none
set PWM_MIN none
set PWM_MAX none
set FMU_MODE pwm
set MAV_TYPE none
set FAILSAFE none
set ESC_TTY /dev/ttyS4

if ver hwcmp TAP_V2
then
	set ESC_TTY /dev/ttyS2
fi

# Start canned airframe config
sh /etc/init.d/rc.autostart

#
# If autoconfig parameter was set, reset it and save parameters
#
if [ $AUTOCNF == yes ]
then
	param set SYS_AUTOCONFIG 0
fi
unset AUTOCNF

if [ $NEW_DEFAULTS == yes ]
then
	param set SYS_PARAM_VER ${DEFAULTS_VER}
	param save
	set NEW_DEFAULTS no
	reboot
fi



#
# Set default output if not set
#
if [ $OUTPUT_MODE == none ]
then
	if [ $USE_IO == yes ]
	then
		set OUTPUT_MODE io
	else
		set OUTPUT_MODE fmu
	fi
fi

send_event start_listening

#
# Check if we should start a thermal calibration
#
set DO_TEMP_CALIB 0
set TEMP_CALIB_ARGS ""
if param compare SYS_CAL_GYRO 1
then
	set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -g"
	param set SYS_CAL_GYRO 0
	set DO_TEMP_CALIB 1
fi
if param compare SYS_CAL_ACCEL 1
then
	set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -a"
	param set SYS_CAL_ACCEL 0
	set DO_TEMP_CALIB 1
fi
if param compare SYS_CAL_BARO 1
then
	set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -b"
	param set SYS_CAL_BARO 0
	set DO_TEMP_CALIB 1
fi


if [ $DO_TEMP_CALIB == 0 ]
then

	gps start -d /dev/ttyS0

	# waypoint storage
	# REBOOTWORK this needs to start in parallel
	if dataman start $DATAMAN_OPT
	then
	fi

fi

#
# Start the RC input driver
#
if fmu mode_pwm2cap2
then
fi

#
# Sensors System (start before Commander so Preflight checks are properly run)
#
sh /etc/init.d/rc.sensors


# make sure to start temperature calibration after the sensors
if [ "x$TEMP_CALIB_ARGS" != "x" ]
then
	usleep 100000
	send_event temperature_calibration ${TEMP_CALIB_ARGS}
fi
unset TEMP_CALIB_ARGS


commander start

#
# Start CPU load monitor
#
load_mon start


# mavlink baudrate for Gimbal UART
set BAUDRATE 500000

# FIXME: for now we just want to make sure mavlink always runs with version 2,
# later move this to a proper place
param set MAV_PROTO_VER 2

# multiplex mavlink 2 & ymavlink on the gimbal serial
protocol_splitter start /dev/ttyS1
# seems we need to start vmount before mavlink (probably due to some ioctl's)
vmount start -d /dev/ymavlink -b $BAUDRATE

# run mavlink (the same instance) on USB and gimbal port
mavlink_dup start -d /dev/mavlink_dup
mavlink_dup add -d /dev/mavlink -b $BAUDRATE
mavlink_dup add -d /dev/ttyACM0 -p
# mavlink rate depends on baudrate
set MAV_RATE 8000
mavlink start -r $MAV_RATE -d /dev/mavlink_dup -m config -b $BAUDRATE
mavlink stream -d /dev/mavlink_dup -s SYSTEM_TIME -r 0.5
unset MAV_RATE

#
# Logging
#
if [ $START_LOGGER == 1 ]
then
	echo "Starting Logger"
	if param compare SYS_LOGGER 0
	then
		# check if we should increase logging rate for ekf2 replay message logging
		if param greater EKF2_REC_RPL 0
		then
			if sdlog2 start -r 500 -e -b 10 -t
			then
			fi
		else
			if sdlog2 start -r 50 -a -b 4 -t
			then
			fi
		fi
	fi
	if param compare SYS_LOGGER 1
	then
		set LOGGER_ARGS ""
		if param compare SDLOG_MODE 1
		then
			set LOGGER_ARGS "-e"
		fi
		if param compare SDLOG_MODE 2
		then
			set LOGGER_ARGS "-f"
		fi
		if param compare SDLOG_MODE 3
		then
			set LOGGER_ARGS "-f"
		fi
		if logger start -b 12 -q 3 -t -m file ${LOGGER_ARGS}
		then
		fi
		unset LOGGER_ARGS
	fi
fi

unset START_LOGGER
unset BAUDRATE

#
# Fixed wing setup
#
if [ $VEHICLE_TYPE == fw ]
then

	if [ $MIXER == none ]
	then
		# Set default mixer for fixed wing if not defined
		set MIXER AERT
	fi

	if [ $MAV_TYPE == none ]
	then
		# Use MAV_TYPE = 1 (fixed wing) if not defined
		set MAV_TYPE 1
	fi

	param set MAV_TYPE $MAV_TYPE

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface

	# Start standard fixedwing apps
	sh /etc/init.d/rc.fw_apps
fi

#
# Multicopters setup
#
if [ $VEHICLE_TYPE == mc ]
then

	if [ $MIXER == none ]
	then
		echo "INFO  [init] Mixer undefined"
	fi

	if [ $MAV_TYPE == none ]
	then
		# Use mixer to detect vehicle type
		if [ $MIXER == quad_x -o $MIXER == quad_+ ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == quad_w ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == quad_h ]
		then
			set MAV_TYPE 2
		fi
		if [ $MIXER == tri_y_yaw- -o $MIXER == tri_y_yaw+ ]
		then
			set MAV_TYPE 15
		fi
		if [ $MIXER == hexa_x -o $MIXER == hexa_+ ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER == hexa_cox ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER == octo_x -o $MIXER == octo_+ ]
		then
			set MAV_TYPE 14
		fi
	fi

	# Still no MAV_TYPE found
	if [ $MAV_TYPE == none ]
	then
		echo "WARN  [init] Unknown MAV_TYPE"
		param set MAV_TYPE 2
	else
		param set MAV_TYPE $MAV_TYPE
	fi

	# Load mixer and configure outputs
	sh /etc/init.d/rc.interface


	if [ $DO_TEMP_CALIB == 0 ]
	then
		# Start standard multicopter apps
		sh /etc/init.d/rc.mc_apps
	fi
fi

unset MIXER
unset MAV_TYPE
unset OUTPUT_MODE

#
# Use 50 Hz PWM output for landing gear
#
if ver hwcmp TAP_V1
then
	pwm rate -c 1 -r 400
else
	pwm rate -g 0 -r 50
	pwm rate -g 1 -r 20
fi

#
# Load the gear mixer onto fmu
#
mixer load /dev/px4fmu /etc/mixers/gear.mix

#
# Set Landing gear pwm configuration directly for the only channel we use
# such that landing gear lowers on kill switch lockdown
pwm disarmed -c 1 -p 1000
pwm failsafe -c 1 -p 1000

# There is no further script processing, so we can free some RAM
# XXX potentially unset all script variables.
#unset TUNE_ERR
unset DO_TEMP_CALIB

if param compare SYS_COMPANION 1921600
then
	mavlink start -r 200000 -b 921600 -d /dev/ttyS1
else

	if param compare SYS_COMPANION 2921600
	then
		mavlink start -r 200000 -b 921600 -d /dev/ttyS2
		mavlink boot_complete
		exit
	else
		#
		# Start the navigator
		#
		if navigator start
		then
		fi
	fi
fi

#
# Enable autosave on the shell
#
param autosave on

mavlink boot_complete
